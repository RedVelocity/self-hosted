services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    container_name: auth-db
    restart: unless-stopped
    volumes:
      - ${STACKS_PATH}/authentik/database:/var/lib/postgresql/data
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: authentik
  redis:
    image: docker.io/library/redis:alpine
    container_name: auth-redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - redis-cli ping | grep PONG
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${STACKS_PATH}/authentik/redis:/data
  server:
    image: ghcr.io/goauthentik/server:latest
    restart: unless-stopped
    container_name: auth-server
    command: server
    networks:
      arrs_default:
      proxy:
      default:
    environment:
      AUTHENTIK_REDIS__HOST: auth-redis
      AUTHENTIK_POSTGRESQL__HOST: auth-db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
    labels:
      - traefik.enable=true
      - traefik.http.routers.authentik.entrypoints=websecure
      - traefik.http.routers.authentik.rule=Host(`${AUTHENTIK_HOST}`)
      - traefik.http.routers.authentik.tls=true
      - traefik.http.services.authentik.loadbalancer.server.port=9000
    volumes:
      - ${STACKS_PATH}/authentik/media:/media
      - ${STACKS_PATH}/authentik/custom-templates:/templates
    ports:
      - 9001:9000
      - 9444:9443
    depends_on:
      - postgresql
      - redis
  worker:
    image: ghcr.io/goauthentik/server:latest
    restart: unless-stopped
    container_name: auth-worker
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: auth-redis
      AUTHENTIK_POSTGRESQL__HOST: auth-db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock
      - ${STACKS_PATH}/authentik/media:/media
      - ${STACKS_PATH}/authentik/certs:/certs
      - ${STACKS_PATH}/authentik/custom-templates:/templates
    depends_on:
      - postgresql
      - redis
networks:
  arrs_default:
    external: true
  proxy:
    external: true
